#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("server:server");
const http = require("http");
const { Server } = require("socket.io");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server and Socket.io
 */

const server = http.createServer(app);
const io = new Server(server, {
  cors: true,
  origins: ["http://localhost:8080"],
});

// CONNECTING TO ROOMS:
// https://stackoverflow.com/questions/19150220/creating-rooms-in-socket-io

io.on("connection", (socket) => {
  console.log("client connected");
  // socket.on("joinRoom", (data) => socket.emit("usersUpdate", "BOOM SERVER!"));
  socket.on("joinRoom", (data) => {
    console.log("attempting to join ", data.room);
    socket.join(data.room);

    // tell the socket that it joined successfully
    io.to(socket.id).emit("joinConfirmation", data);

    // tell the room who joined
    io.to(data.room).emit(
      "roomNotification",
      `${data.user} has joined ${data.room}`
    );
  });

  socket.on("chatMessage", (data) => {
    console.log("chat:", data);
    io.to(data.room).emit("chatMessage", data);
  });
});

app.set("socketio", io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const portValue = parseInt(val, 10);

  if (isNaN(portValue)) {
    // named pipe
    return val;
  }

  if (portValue >= 0) {
    // port number
    return portValue;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
